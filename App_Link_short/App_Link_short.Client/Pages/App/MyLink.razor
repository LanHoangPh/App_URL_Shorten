@page "/app/my-links"
@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@* @inject NavigationManager Navigation *@
@inject ILinkService LinkService
@inject  IJSRuntime JsRuntime
@layout InteractiveMainLayout
<PageTitle>MyLink</PageTitle>
<SectionContent SectionName="client-heading">
    <h1 class="text-main fw-bold text-center"> My Links</h1>
</SectionContent>

<div class="row mt-3">
    <div class="col-12 d-flex justify-content-between align-items-center">
        <h3>@(_showActiveOnly? "Active":"All Links")</h3>
        @* <a href="@ShowButtonLinkUrl" class="btn btn-sm btn-outline-primary">Show @(ShowActiveOnly ? "All" : "Active Link")</a> *@
        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="ToggleActiveOnly">Show @(_showActiveOnly ? "All" : "Active Link")</button>
    </div>
    <hr/>
</div>
@if (_isLoading)
{
    <Loader/>
}
else
{
    <div class="row links-container">
        <QuickGrid ItemsProvider="_linksProvider" Pagination="_paginationState" @ref="_quickGrid">
            <TemplateColumn>
                <div class="p-2 mb-4 border-bottom shadow link-item">
                    <div class="row">
                        <div class="col-sm-6 d-flex">
                            <div class="h3 d-flex flex-column justify-content-center">
                                <i class="bx bx-link"></i>
                                @if (context.IsActive)
                                {
                                    <i class="bx bx-check text-success fw-bold" title="Active"></i>
                                }
                                else
                                {
                                    <i class="bx bx-x text-danger fw-bold" title="In-active"></i>
                                }
                            </div>
                            <div class="vr mx-3"></div>
                            <div class="flex-grow-1">
                                <h5>
                                    <a href="@context.ShortUrl" target="_blank" class="link-dark" title="@context.ShortUrl">@context.ShortUrl</a>
                                    <button type="button" class="btn btn-sm btn-default ms-1" @onclick="() => CopyToAsync(context.ShortUrl)">
                                        <i class="bx bx-copy"></i>
                                    </button>
                                </h5>
                                <small class="d-flex">
                                    <span>LongUrl: <a href="@context.ShortUrl" target="_blank" class="link-dark" title="@context.LongUrl">@context.LongUrl</a></span>
                                    <button type="button" class="btn btn-sm btn-default ms-1" @onclick="() => CopyToAsync(context.LongUrl)">
                                        <i class="bx bx-copy"></i>
                                    </button>
                                </small>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <h5 class="">Total Click: @context.TotalClicks</h5>
                            <a href="/app/my-links/@context.Id" class="btn btn-sm btn-main">
                                <i class="bx bx-chart me-1"></i><span class="text-white">View Details</span>
                            </a>
                        </div>
                        <div class="col-sm-3 d-flex flex-column justify-content-center align-items-center link-stats">
                            <button type="button" class="btn btn-sm btn-outline-dark">
                                <i class="bx bx-edit me-1"></i> <span>Edit</span>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-danger">
                                <i class="bx bx-edit me-1"></i> <span>Delete</span>
                            </button>
                        </div>
                    </div>
                </div>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="_paginationState"/>
    </div>
}

@code {
    private const int PageSize = 5;
    private bool _isLoading = false;
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask{ get; set; }
    // private LinkDto[] _links = [];
    // [SupplyParameterFromQuery(Name = "show")]
    // private string? Show { get; set; } = ShowType.ActiveOnly.ToString();
    //
    // private bool ShowActiveOnly => string.IsNullOrWhiteSpace(Show) || Show == ShowType.ActiveOnly.ToString();
    // private string ShowButtonLinkUrl => ShowActiveOnly ? $"/app/my-links?show={ShowType.All}" : $"/app/my-links?show={ShowType.ActiveOnly}";
    private bool _showActiveOnly = true;
    
    private GridItemsProvider<LinkDto>? _linksProvider;
    public QuickGrid<LinkDto>? _quickGrid;
    private PaginationState _paginationState = new() { ItemsPerPage = PageSize };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var userId = authState.User.GetUserId()?? "";
        try
        {
            _linksProvider = async request =>
            {
                var (links, totalCount) = await LinkService.GetLinksByUserAsync(userId, request.StartIndex, request.Count ?? PageSize, _showActiveOnly);
                return GridItemsProviderResult.From(links, totalCount);
            };
            Console.WriteLine($"Fetching links for UserId: {userId}");
            await _paginationState.SetCurrentPageIndexAsync(0);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading links: {ex.Message}");
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ToggleActiveOnly()
    {
        _showActiveOnly = !_showActiveOnly;
        _isLoading = true;
        if (_quickGrid is not null)
            {
                await _quickGrid.RefreshDataAsync();
            }
        _isLoading = false;
    }

    // protected override async Task OnParametersSetAsync()
    // {
    //     _isLoading = true;
    //     if (_quickGrid is not null)
    //     {
    //         await _quickGrid.RefreshDataAsync();
    //     }
    //     _isLoading = false;
    // }

    private async Task CopyToAsync(string linkUrl)
    {
        await JsRuntime.InvokeVoidAsync("window.copyToClipboard", linkUrl);
    }

    enum ShowType
    {
        All,
        ActiveOnly
    }
}