@page "/app/my-links"
@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@inject NavigationManager Navigation
@inject ILinkService LinkService
@inject AuthenticationStateProvider AuthStateProvider
@layout InteractiveMainLayout
<PageTitle>MyLink</PageTitle>
<SectionContent SectionName="client-heading">
    <h1 class="text-main fw-bold text-center"> My Links</h1>
</SectionContent>
@if (_isLoading)
{
    <Loader/>
}
else if (_links.Length == 0)
{
    <p>No links found.</p>
}
else
{
    
    <div class="row links-container">
        <ul>
            @foreach (var link in _links)
            {
                <div class="p-2 mb-4 border-bottom shadow link-item">
                    <div class="row">
                        <div class="col-sm-6 d-flex">
                            <div class="h3 d-flex flex-column justify-content-center">
                                <i class="bx bx-link"></i>
                                @if (link.IsActive)
                                {
                                    <i class="bx bx-check text-success fw-bold" title="Active"></i>
                                }
                                else
                                {
                                    <i class="bx bx-x text-danger fw-bold" title="In-active"></i>
                                }
                            </div>
                            <div class="vr mx-3"></div>
                            <div class="flex-grow-1">
                                <h5>
                                    <a href="@link.ShortUrl" target="_blank" class="link-dark" title="@link.ShortUrl">@link.ShortUrl</a>
                                    <button type="button" class="btn btn-sm btn-default ms">
                                        <i class="bx bx-copy"></i>
                                    </button>
                                </h5>
                                <small class="d-flex">
                                    <span>LongUrl: <a href="@link.ShortUrl" target="_blank" class="link-dark" title="@link.LongUrl">@link.LongUrl</a></span>
                                    <button type="button" class="btn btn-sm btn-default ms">
                                        <i class="bx bx-copy"></i>
                                    </button>
                                </small>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <h5 class="">Total Click: @link.TotalClicks</h5>
                            <a href="/app/my-links/@link.Id" class="btn btn-sm btn-main">
                                <i class="bx bx-chart me-1"></i><span class="text-white">View Details</span>
                            </a>
                        </div>
                        <div class="col-sm-3 d-flex flex-column justify-content-center align-items-center link-stats">
                            <button type="button" class="btn btn-sm btn-outline-dark">
                                <i class="bx bx-edit me-1"></i> <span>Edit</span>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-danger">
                                <i class="bx bx-edit me-1"></i> <span>Delete</span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </ul>
    </div>
}

@code {
    private bool _isLoading = false;
    private LinkDto[] _links = [];
    private string? Show { get; set }
    private ShowType _showType = ShowType.ActiveOnly;
    
    private GridItemsProvider<LinkDto> _linksProvider;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
        try
        {
            _linksProvider = async request =>
            {
                var(links, count) = await LinkService.GetLinksByUserAsync(userId, request.StartIndex, request.Count)
            }
            _isLoading = true;
            
            Console.WriteLine($"Fetching links for UserId: {userId}");
            (_links, var count) = await LinkService.GetLinksByUserAsync(userId, 0, 10, false);
            Console.WriteLine($"Loaded {count} links, _links length: {_links.Length}");
            _isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading links: {ex.Message}");
        }
    }

    enum ShowType
    {
        All,
        ActiveOnly
    }
}